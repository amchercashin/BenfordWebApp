real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 406, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 406, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 406, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 406, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 700, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 700, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 700, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns = 10000
normals <- rnorm(n = ns, mean = 700, sd = 1)
poissons <- rpois(n = ns, lambda = 2)
uniforms <- runif(n = ns, min = 0, max = 1)
exponentials <- rexp(ns, rate = 1)
f.sum <- function(x, y){x + y}
f.min <- function(x, y){x - y}
f.mul <- function(x, y){x * y}
f.div <- function(x, y){ifelse(y != 0, x/y, x)}
x<-0
f.ran <- function(a, b, c, d){
x <<- sample(1:4, 3, replace = FALSE)
r <- c(f.sum, f.min, f.mul, f.div)[x]
real <- r[[1]](a, b)
real <- r[[2]](real, c)
real <- r[[3]](real, d)
}
real <- f.ran(normals, poissons, uniforms, exponentials)
math_df <- data.frame(n = 1:4, l = c("+", "-", "*", "/"))
math_str <- paste("normals", math_df[math_df==x[1], 2],
"poissons", math_df[math_df==x[2], 2],
"uniforms", math_df[math_df==x[3], 2], "exponentials")
real <- real[real != 0 & !is.na(real)]
real <- real[sample(x = 1:ns, size = 10000, replace = TRUE)]
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
par(mfrow=c(1,1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
shiny::runApp()
shiny::runApp()
sessionInfo()
Sys.getlocale()
прив <-1
прив
setwd("~/Учеба/DataScience/DDP/CP")
shiny::runApp()
install.packages(c("caret", "crayon", "e1071", "gridExtra", "rattle", "RcppEigen", "verification"))
library(devtools)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
real <- as.integer(substr(as.character(format(abs(normals), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
real <- as.integer(substr(as.character(format(abs(normals), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
real
normals
real <- as.integer(substr(as.character(format(abs(poissons), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
ns
real <- as.integer(substr(as.character(format(abs(poissons), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns*10, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
real <- as.integer(substr(as.character(format(abs(uniforms), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
real <- as.integer(substr(as.character(format(abs(exponentials), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
exponentials <- rexp(ns, rate = 10)
real <- as.integer(substr(as.character(format(abs(exponentials), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
real <- as.integer(substr(as.character(format(abs(reals), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
reals <- normals/uniforms*poissons
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
reals <- normals/uniforms*poissons
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
reals <- normals-uniforms+poissons
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
real <- normals/uniforms*poissons
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
real <- normals*uniforms/poissons
real <- as.integer(substr(as.character(format(abs(real), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
normals <- rnorm(n = ns, mean = 0, sd = 1)*rnorm(n = ns, mean = 20, sd = 10)/rnorm(n = ns, mean = 5, sd = 2)
real <- as.integer(substr(as.character(format(abs(normals), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
normals <- rnorm(n = ns, mean = 0, sd = 1)-rnorm(n = ns, mean = 20, sd = 10)+rnorm(n = ns, mean = 5, sd = 2)
real <- as.integer(substr(as.character(format(abs(normals), scientific = TRUE)), start = 1, stop = 1))
bp <- barplot(table(real),
main = "First digit appearance counts",
xlab = "first digit from generated number sequence",
ylab = "count"
)
lines(x = bp, y = log10(1 + 1/1:9) * ns, col = "red", lty = 3, lwd = 5)
legend("topright", "Benford's law first digit distribution", col = "red",
text.col = "black", lty = 3, lwd = 4,
merge = TRUE, bg = "white")
install.packages("timeSeries")
tsRet <- returns(tsApril01, trim = TRUE)
GoodFriday(2001)
EasterMonday(2001)
tsRet
library(timeSeries)
head(MSFT)
end(MSFT)
## Cut out April Data from 2001 -
Close <- MSFT[, "Close"]
tsApril01 <- window(Close, start="2001-04-01", end="2001-04-30")
tsApril01
## Align Daily Series with NA -
tsRet <- returns(tsApril01, trim = TRUE)
GoodFriday(2001)
EasterMonday(2001)
tsRet
alignDailySeries(tsRet, method = "fillNA", include.weekends = TRUE)
alignDailySeries(tsRet, method = "fillNA", include.weekends = FALSE)
alignDailySeries(tsRet, method = "fillNA", include.weekends = TRUE)
?alignDailySeries
alignDailySeries(tsRet, method = "fillZeros", include.weekends = TRUE)
alignDailySeries(tsRet, method = "fmm", include.weekends = TRUE)
?na.omit
na.omit(tsRet
na.omit(tsRet)
na.omit(tsRet, method="z")
z <- zoo(c(1311.56, 1309.04, 1295.5, 1296.6, 1286.57, 1288.12,
1289.12, 1289.12, 1285.33, 1307.65, 1309.93, 1311.46, 1311.28,
1308.11, 1301.74, 1305.41, 1309.72, 1310.61, 1305.19, 1313.21,
1307.85, 1312.25, 1325.76), as.Date(c(13242, 13244,
13245, 13248, 13249, 13250, 13251, 13252, 13255, 13256, 13257,
13258, 13259, 13262, 13263, 13264, 13265, 13266, 13269, 13270,
13271, 13272, 13274)))
install.packages("zoo")
library(zoo)
install.packages("zoo")
install.packages("zoo")
z <- zoo(c(1311.56, 1309.04, 1295.5, 1296.6, 1286.57, 1288.12,
1289.12, 1289.12, 1285.33, 1307.65, 1309.93, 1311.46, 1311.28,
1308.11, 1301.74, 1305.41, 1309.72, 1310.61, 1305.19, 1313.21,
1307.85, 1312.25, 1325.76), as.Date(c(13242, 13244,
13245, 13248, 13249, 13250, 13251, 13252, 13255, 13256, 13257,
13258, 13259, 13262, 13263, 13264, 13265, 13266, 13269, 13270,
13271, 13272, 13274)))
z
rng <- range(time(z))
rng
time(z)
z.na <- merge(z, zoo(, seq(rng[1], rng[2], by = "day")))
z.na <- merge(z, zoo(, seq(rng[1], rng[2], by = "day")))
z.na
merge
?merge
detach(zoo)
detach("zoo")
?detach()
detach(zoo())
detach(zoo)
detach(package:zoo)
?merge
detach(package:timeSeries)
?merge
?merge
merge(c("a","b","c"),c(1,2,3))
?seq
?as.Date()
merge(c("a","b","c"),seq(as.Date("2015/01/01"), as.Date("2015/02/01"), by ="day")
merge(c("a","b","c"),seq(as.Date("2015/01/01"), as.Date("2015/02/01"), by ="day"))
library(qcc)
install.packages("qcc")
library(qcc)
example(qcc)
